library("data.table")
polizas <- read.csv("Data//2014PolizasDiario.csv")
#Revisando
str(polizas)
head(polizas)
tail(polizas)
polizas <- polizas[2:247089,]
#Removing ","
polizas$Cargos <- gsub(",","",polizas$Cargos)
polizas$Abonos <- gsub(",","",polizas$Abonos)
polizas$Saldo <- gsub(",","",polizas$Saldo)
#Verifying NAs
sum(is.na(polizas$Cargos))
sum(is.na(polizas$Abonos))
sum(is.na(polizas$Saldo))
#Setting data type
polizas$Cargos <- as.numeric(as.character(polizas$Cargos))
polizas$Abonos <- as.numeric(as.character(polizas$Abonos))
polizas$Saldo <- as.numeric(as.character(polizas$Saldo))
#Review
str(polizas)
head(polizas, n=5)
sum(polizas$Cargos,na.rm = T) - sum(polizas$Abonos,na.rm = T)
#Identifying "Ajustes" or "Reclasificaciones"
strings <- c("ISI ")
exclude <- c("SISTEMA")
#FLAG - AJUSTE
polizas$Flag <- 0
polizas$Flag[grep(strings, polizas$ConceptoMovimiento)] <- 1
polizas$Flag[grep(exclude, polizas$ConceptoMovimiento)] <- 0
#Creating new aggr criteria
polizas$Group <- substr(polizas$CodigoNombreCuentaConta,1,4)
#Getting Filtered ConceptoMovimiento
unique(polizas$ConceptoMovimiento[polizas$Flag==1])
#Creating "reclasif" data table, flag = 1
reclasif <- data.table(polizas[polizas$Flag==1,],
key = c("NombrePeriodoEjercicio",
"UsuarioCaptura",
"CodigoNombreCuentaConta",
"ConceptoPoliza",
"ConceptoMovimiento",
"SucursalDK",
"Group"))
#Error in concepto
reclasif$ConceptoMovimiento[reclasif$Folio==10205] <- "RECLASIF. SDOS. CONTPAQ ISI SEP 2014"
#Aggregating by CodigoNombreCuentaConta
cuentaTotalAjtes <- reclasif[,j=list(cargos=sum(Cargos),
abonos=sum(Abonos),
neto = sum(Saldo)),
by=CodigoNombreCuentaConta]
#Aggregating by ConceptoPoliza
conceptoPolizaTotalAjtes <- reclasif[,j=list(cargos=sum(Cargos),
abonos=sum(Abonos),
neto = sum(Saldo)),
by=ConceptoPoliza]
#Aggregating by ConceptoMovimiento
conceptoMovimientoTotalAjtes <- reclasif[,j=list(cargos=sum(Cargos),
abonos=sum(Abonos),
neto = sum(Saldo)),
by=ConceptoMovimiento]
#Aggregating by SucursalDK
sucursalTotalAjtes <- reclasif[,j=list(cargos=sum(Cargos),
abonos=sum(Abonos),
neto = sum(Saldo)),
by=SucursalDK]
#Aggregating by Group
groupTotalAjtes <- reclasif[,j=list(cargos=sum(Cargos),
abonos=sum(Abonos),
neto = sum(Saldo)),
by=Group]
groupTotalAjtes$netoabs <- abs(groupTotalAjtes$neto)
#quantiles
groupTotalAjtes$Q <- cut(groupTotalAjtes$netoabs,
breaks = quantile(groupTotalAjtes$netoabs, c(0,.2,.4,.6,.8,1)),
include.lowest = T)
groupTotalAjtes$Q2 <- as.numeric(groupTotalAjtes$Q)
#Export dataframe -> csv
write.csv(cuentaTotalAjtes, "Output/cuentaTotalAjtes.csv")
write.csv(conceptoPolizaTotalAjtes, "Output/conceptoPolizaTotalAjtes.csv")
write.csv(conceptoMovimientoTotalAjtes, "Output/conceptoMovimientoTotalAjtes")
write.csv(sucursalTotalAjtes, "Output/sucursalTotalAjtes.csv")
write.csv(groupTotalAjtes, "Output/groupTotalAjtes.csv")
#Which account is this?
grep("4104",unique(reclasif$CodigoNombreCuentaConta),value = T)
#Which movement?
index <- grep("4104",reclasif$CodigoNombreCuentaConta,value = F)
reclasif[index,]
#just for MMD
groupTotalAjtes[order(-netoabs), c(1,4:5,7),with = F]
library("data.table")
polizas <- read.csv("Data//2014PolizasDiario.csv")
firstvalues <- c(format(round(mean(stepsByDay$totalsteps),6),decimal.mark=".", nsmall=6),
format(round(median(stepsByDay$totalsteps),6),decimal.mark=".", nsmall=0))
#Loading libraries
library(data.table)
library(ggplot2)
#Extracting and loading data into activityData dataframe
activityData <- read.csv(unz("activity.zip", "activity.csv"))
# Process/transform the data (if necessary) into a format suitable for your analysis
# Setting data types
activityData$date <- as.Date(as.character(activityData$date),"%Y-%m-%d")
#Adding new columns
activityData$weekday <- weekdays(activityData$date)
#Activity data as "data.table"
activityData <- data.table(activityData,
key=c("date","interval","weekday"))
library(data.table)
library(ggplot2)
#Extracting and loading data into activityData dataframe
activityData <- read.csv(unz("activity.zip", "activity.csv"))
activityData <- read.csv(unz("./activity.zip", "activity.csv"))
getwd()
currentpath <- dirname(parent.frame(2)$ofile)
parent.frame(2)
class(parent.frame(2))
dirname(parent.frame(2))
dirname(parent.frame(1))
dirname(parent.frame())
dirname(parent.frame(3))
firstvalues <- c(format(round(mean(stepsByDay$totalsteps),6),decimal.mark=".", nsmall=6),
format(round(median(stepsByDay$totalsteps),6),decimal.mark=".", nsmall=0))
getwd()
setwd("~/Dropbox/Repository/RepData_PeerAssessment1/)
""
)
))
$"Â·"
setwd("~/Dropbox/Repository/RepData_PeerAssessment1/")
#Loading libraries
library(data.table)
library(ggplot2)
#Extracting and loading data into activityData dataframe
activityData <- read.csv(unz("./activity.zip", "activity.csv"))
# Process/transform the data (if necessary) into a format suitable for your analysis
# Setting data types
activityData$date <- as.Date(as.character(activityData$date),"%Y-%m-%d")
#Adding new columns
activityData$weekday <- weekdays(activityData$date)
#Activity data as "data.table"
activityData <- data.table(activityData,
key=c("date","interval","weekday"))
#Aggregating steps by date
stepsByDay <- activityData[,j=list(totalsteps=sum(steps, na.rm = TRUE))
,by="date"]
#Histogram:
plot1 <- ggplot(stepsByDay,
aes(totalsteps))
plot1 + geom_histogram(fill="blue", color="white") +
theme_bw() +
labs(x="Total number of steps / day",
y = "Count",
title = "Total number of steps taken per day")
#Aggregating steps by interval
stepsByInterval <- activityData[,j=list(avgsteps=mean(steps, na.rm = TRUE))
,by="interval"]
#Histogram:
plot2 <- ggplot(stepsByInterval,
aes(x = interval,
y = avgsteps))
plot2 + geom_line(color="blue") +
theme_bw() +
labs(x="5 minutes Interval",
y = "Average number of steps taken",
title = "Average number of steps taken by 5 minutes interval \n averaged across all days")
#Average steps by weekday, interval
stepsbyweekdayinterval <- activityData[,j=list(avgstepsfill=mean(steps, na.rm = TRUE)),
by=c("weekday","interval")]
activityDataNN <- merge(x=activityData,
y=stepsbyweekdayinterval,
by=c("weekday", "interval"),
all.x = TRUE)
activityDataNN$steps[is.na(activityDataNN$steps)] <- activityDataNN$avgstepsfill[is.na(activityDataNN$steps)]
activityDataNN <- data.table(activityDataNN[,2:4,with=FALSE],
key = c("date", "interval"))
#Aggregating steps by date
stepsByDayNN <- activityDataNN[,j=list(totalsteps=sum(steps, na.rm = TRUE))
,by="date"]
#Histogram:
plot1 <- ggplot(stepsByDayNN,
aes(totalsteps))
plot1 + geom_histogram(fill="blue", color="white") +
theme_bw() +
labs(x="Total number of steps / day",
y = "Count",
title = "Total number of steps taken per day")
firstvalues <- c(format(round(mean(stepsByDay$totalsteps),6),decimal.mark=".", nsmall=6),
format(round(median(stepsByDay$totalsteps),6),decimal.mark=".", nsmall=0))
lastvalues <- c(format(round(mean(stepsByDayNN$totalsteps),6),decimal.mark=".", nsmall=6),
format(round(median(stepsByDayNN$totalsteps),6),decimal.mark=".", nsmall=0))
class(firstvalues)
firstvalues
firstvalues <- c(round(mean(stepsByDay$totalsteps),6),
round(median(stepsByDay$totalsteps),6))
lastvalues <- c(round(mean(stepsByDayNN$totalsteps),6),
round(median(stepsByDayNN$totalsteps),6))
firstvalues
class(firstvalues)
class(lastvalues)
firstvalues <- c(mean(stepsByDay$totalsteps),
median(stepsByDay$totalsteps))
lastvalues <- c(mean(stepsByDayNN$totalsteps),
median(stepsByDayNN$totalsteps))
impact <- lastvalues - firstvalues
impact
different <- as.dataframe(firstvalues, lastvalues, impact)
different <- as.data.frame(firstvalues, lastvalues, impact)
different <- as.data.frame(cbind(firstvalues, lastvalues, impact))
different <- as.data.frame(cbind(firstvalues,
lastvalues,
impact),
row.names = c("mean",
"median")
)
different
rm(different)
diffs <- as.data.frame(cbind(firstvalues,
lastvalues,
impact),
row.names = c("mean",
"median"))
diffs
weekdays(activityDataNN$date)
str(activityDataNN)
weekdays(activityDataNN$date) %in% c("Sunday","Saturday")
activityDataNN$weekdayweekend[weekdays(activityDataNN$date) %in% c("Sunday","Saturday")] <- "WEEKEND"
activityDataNN$weekdayweekend
activityDataNN$weekdayweekend <- "WEEKDAY"
activityDataNN$weekdayweekend[weekdays(activityDataNN$date) %in% c("Sunday","Saturday")] <- "WEEKEND"
activityDataNN$weekdayweekend
activityDataNN$weekdayweekend <- "WEEKDAY"
activityDataNN$weekdayweekend
activityDataNN$weekdayweekend[weekdays(activityDataNN$date) %in% c("Sunday","Saturday")] <- "WEEKEND"
activityDataNN$weekdayweekend
sum(is.na(activityDataNN$weekdayweekend))
activityDataNN$weekdayweekend <- "WEEKDAY"
activityDataNN$weekdayweekend[weekdays(activityDataNN$date) %in% c("Sunday","Saturday")] <- "WEEKEND"
sum(is.na(activityDataNN$weekdayweekend))
class(activityDataNN$weekdayweekend)
activityDataNN$weekdayweekend <- as.factor(activityDataNN$weekdayweekend)
class(activityDataNN$weekdayweekend)
str(activityDataNN)
activityDataNN <- as.data.table(activityDataNN,
key=c("interval","weekdayweekend"))
activityDataNN <- data.table(activityDataNN,
key=c("interval","weekdayweekend"))
str(activityDataNN)
activityDataWkdayNN <- activityDataNN[,j=list(stepsaverage=mean(steps)),
by=c("weekdayweekend","interval")]
activityDataWkdayNN
str(activityDataWkdayNN)
rm(activityDataWkdayNN)
stepsByWeekdayNN <- activityDataNN[,j=list(stepsaverage=mean(steps)),
by=c("weekdayweekend","interval")]
plot3 <- ggplot(stepsByWeekdayNN,
aes(x=interval,
y=stepsaverage))
plot3 + geom_line(color="blue")
plot3 <- ggplot(stepsByWeekdayNN,
aes(x=interval,
y=stepsaverage,
color = weekdaywekend))
plot3 + geom_line(color="blue")
plot3 + geom_line(color="blue") +
theme_bw() +
facet_wrap(facet = ~weekdayweekend)
labs(x="5 minutes Interval",
y = "Average number of steps taken",
title = "Average number of steps taken by 5 minutes interval \n averaged across all days")
plot3 + geom_line(color="blue") +
theme_bw() +
facet_wrap(facet = ~weekdayweekend,
ncol = 1)
plot3 + geom_line(color="blue") +
theme_bw() +
facet_wrap(facet = ~weekdayweekend,
ncol = 1) +
labs(x="Interval",
y = "Number of steps",
title = "Average number of steps taken by 5 minutes interval")
plot3 + geom_line(color="blue") +
theme_bw() +
facet_wrap(facet = ~weekdayweekend,
ncol = 1) +
labs(x="Interval",
y = "Number of steps",
title = "Average number of steps taken by 5 minutes interval \n")
